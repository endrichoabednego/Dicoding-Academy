# -*- coding: utf-8 -*-
"""Image Classification Model Deployment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zoyFQcO1AUgSmfSbnFnNSrJh91OO0dqc

Submission Proyek Akhir : Image Classificaiton Model Deployment

---


Modul : Belajar Pengembangan Machine Learning

---


Nama / ID Dicoding : Endricho Abednego / M239X0468
"""

import tensorflow as tf
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import zipfile,os
from tensorflow.python import metrics
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
import matplotlib.pyplot as plt
import pathlib

! pip install kaggle
! mkdir ~/.kaggle 
! cp kaggle.json ~/.kaggle/
! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets download misrakahmed/vegetable-image-dataset

! unzip vegetable-image-dataset.zip

base_dir = "Vegetable Images"
train_dir = os.path.join(base_dir,'train')
val_dir = os.path.join(base_dir,'validation')

os.listdir('Vegetable Images/train')

os.listdir('Vegetable Images/validation')

train_datagen = ImageDataGenerator(
      rescale = 1.0/255,
      horizontal_flip = True,
      shear_range = 0.2,
      zoom_range = 0.2, 
      rotation_range = 20,
      width_shift_range = 0.2,
      height_shift_range = 0.2,
      vertical_flip = True,
      fill_mode = 'nearest',
      validation_split = 0.2)

validation_datagen = ImageDataGenerator(
      rescale = 1.0/255,
      horizontal_flip = True,
      shear_range = 0.2,
      zoom_range = 0.2, 
      rotation_range = 20,
      width_shift_range = 0.2,
      height_shift_range = 0.2,
      vertical_flip = True,
      fill_mode = 'nearest',
      validation_split = 0.2
)

train_gen = train_datagen.flow_from_directory(
    train_dir, 
    target_size=(200,200), 
    batch_size = 32,
    class_mode='categorical',
    subset = 'training'
)

valid_gen = validation_datagen.flow_from_directory(
    val_dir, 
    target_size=(200,200), 
    class_mode='categorical',
    
)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32,(3,3),activation= 'relu',input_shape=(200,200,3)),
    tf.keras.layers.MaxPool2D(2,2),
    tf.keras.layers.Conv2D(64,(3,3),activation= 'relu'),
    tf.keras.layers.MaxPool2D(2,2),
    tf.keras.layers.Conv2D(128,(3,3),activation= 'relu'),
    tf.keras.layers.MaxPool2D(2,2),
    tf.keras.layers.Conv2D(256,(3,3),activation= 'relu'),
    tf.keras.layers.MaxPool2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512,activation= 'relu'),
    tf.keras.layers.Dense(15,activation= 'softmax')
])
model.summary()

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics = ['accuracy'])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.92 and logs.get('val_accuracy')>0.92):
      print("\nAkurasi sudah diatas 92%, Bagus!")
      self.model.stop_training = True

callbacks = myCallback()

history = model.fit(train_gen, 
                    epochs = 55, 
                    steps_per_epoch = 50,
                    validation_data = valid_gen, 
                    validation_steps = 10,
                    verbose = 2,
                    callbacks = [callbacks])

plt.figure(figsize=(8,5))
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.ylim(ymin=0)
plt.show()

plt.figure(figsize=(8,5))
plt.plot(history.history['loss'], label='train_loss')
plt.plot(history.history['val_loss'], label='validation_loss')
plt.title('Model Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.ylim(ymin=0)
plt.show()

export_dir = 'saved_model/'
tf.saved_model.save(model, export_dir)
 
converter = tf.lite.TFLiteConverter.from_saved_model(export_dir)
tflite_model = converter.convert()
 
tflite_model_file = pathlib.Path('vegetable.tflite')
tflite_model_file.write_bytes(tflite_model)